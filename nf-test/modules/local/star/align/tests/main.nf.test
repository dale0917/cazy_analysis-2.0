// zs modules test star/align
nextflow_process {

    name "Test Process STAR_ALIGN"
    script "../main.nf"
    config "./nextflow.config"
    process "STAR_ALIGN"

    tag "modules"
    tag "star"
    tag "star/align"

    setup {
        run("STAR_GENOMEGENERATE") {
            script "../../genomegenerate/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test_fasta' ],
                    [ file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true) ]
                ])
                """
            }
        }
    }

    test("star align paired end") {

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'nfcore-test-sample', single_end:false ], // meta map
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]).view()
                input[1] = STAR_GENOMEGENERATE.out.index.map{ it[1] } // our star/align module takes only the index and not the tuple
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                        workflow,
                        path( "${outputDir}/nfcore-test-sample.Log.progress.out" ),
                        path( "${outputDir}/nfcore-test-sample.ReadsPerGene.out.tab" ),
                        path( "${outputDir}/nfcore-test-sample.SJ.out.tab" )
                    ).match() // these are the only ones deterministic
                }
            )
        }

    }

}
