nextflow_workflow {

    name "Test Subworkflow FASTQ_ALIGN_STAR"
    script "../main.nf"
    config "./nextflow.config"
    workflow "FASTQ_ALIGN_STAR"

    tag "subworkflows"
    tag "subworkflows/fastq_align_star"
    tag "fastq_align_star"

    setup {
        run("STAR_GENOMEGENERATE") {
            script "../../../../modules/zs/star/genomegenerate/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test_fasta' ],
                    [ file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]
                ])
                input[1] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true) ]
                ])
                """
            }
        }
    }

    test("star with pre-built index - paired_end") {
        // using nf-test setup() method to pre-built and index for workflow

        when {
            workflow { 
                """
                input[0] = Channel.of([
                    [ id:'nfcore-test-sample', single_end:false ],
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ])
                input[1] = STAR_GENOMEGENERATE.out.index.map{ it[1] }
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out.bam).match() } // only file that stays the same
            )
        }

    }

    test("star without pre-built index - paired_end") {

        when {
            workflow { 
                """
                input[0] = Channel.of([
                    [ id:'nfcore-test-sample', single_end:false ],
                    [
                        file(params.test_data['homo_sapiens']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ])
                input[1] = []
                input[2] = Channel.of([
                    [ id:'test_fasta' ],
                    [ file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]
                ])
                input[3] = Channel.of([
                    [ id:'test_gtf' ],
                    [ file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true) ]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out.bam).match() } // only file that stays the same
            )
        }

    }

}

